# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itreefile', [dirname(__file__)])
        except ImportError:
            import _itreefile
            return _itreefile
        if fp is not None:
            try:
                _mod = imp.load_module('_itreefile', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itreefile = swig_import_helper()
    del swig_import_helper
else:
    import _itreefile
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itreefile.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _itreefile.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _itreefile.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _itreefile.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _itreefile.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _itreefile.SwigPyIterator_equal(self, x)

    def copy(self):
        return _itreefile.SwigPyIterator_copy(self)

    def next(self):
        return _itreefile.SwigPyIterator_next(self)

    def __next__(self):
        return _itreefile.SwigPyIterator___next__(self)

    def previous(self):
        return _itreefile.SwigPyIterator_previous(self)

    def advance(self, n):
        return _itreefile.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _itreefile.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _itreefile.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _itreefile.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _itreefile.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _itreefile.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _itreefile.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _itreefile.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _itreefile.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _itreefile.StringVector___nonzero__(self)

    def __bool__(self):
        return _itreefile.StringVector___bool__(self)

    def __len__(self):
        return _itreefile.StringVector___len__(self)

    def pop(self):
        return _itreefile.StringVector_pop(self)

    def __getslice__(self, i, j):
        return _itreefile.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _itreefile.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _itreefile.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _itreefile.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _itreefile.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _itreefile.StringVector___setitem__(self, *args)

    def append(self, x):
        return _itreefile.StringVector_append(self, x)

    def empty(self):
        return _itreefile.StringVector_empty(self)

    def size(self):
        return _itreefile.StringVector_size(self)

    def clear(self):
        return _itreefile.StringVector_clear(self)

    def swap(self, v):
        return _itreefile.StringVector_swap(self, v)

    def get_allocator(self):
        return _itreefile.StringVector_get_allocator(self)

    def begin(self):
        return _itreefile.StringVector_begin(self)

    def end(self):
        return _itreefile.StringVector_end(self)

    def rbegin(self):
        return _itreefile.StringVector_rbegin(self)

    def rend(self):
        return _itreefile.StringVector_rend(self)

    def pop_back(self):
        return _itreefile.StringVector_pop_back(self)

    def erase(self, *args):
        return _itreefile.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _itreefile.new_StringVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _itreefile.StringVector_push_back(self, x)

    def front(self):
        return _itreefile.StringVector_front(self)

    def back(self):
        return _itreefile.StringVector_back(self)

    def assign(self, n, x):
        return _itreefile.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _itreefile.StringVector_resize(self, *args)

    def insert(self, *args):
        return _itreefile.StringVector_insert(self, *args)

    def reserve(self, n):
        return _itreefile.StringVector_reserve(self, n)

    def capacity(self):
        return _itreefile.StringVector_capacity(self)
    __swig_destroy__ = _itreefile.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _itreefile.StringVector_swigregister
StringVector_swigregister(StringVector)

class vector_IResNodeInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_IResNodeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_IResNodeInfo, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _itreefile.vector_IResNodeInfo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _itreefile.vector_IResNodeInfo___nonzero__(self)

    def __bool__(self):
        return _itreefile.vector_IResNodeInfo___bool__(self)

    def __len__(self):
        return _itreefile.vector_IResNodeInfo___len__(self)

    def pop(self):
        return _itreefile.vector_IResNodeInfo_pop(self)

    def __getslice__(self, i, j):
        return _itreefile.vector_IResNodeInfo___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _itreefile.vector_IResNodeInfo___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _itreefile.vector_IResNodeInfo___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _itreefile.vector_IResNodeInfo___delitem__(self, *args)

    def __getitem__(self, *args):
        return _itreefile.vector_IResNodeInfo___getitem__(self, *args)

    def __setitem__(self, *args):
        return _itreefile.vector_IResNodeInfo___setitem__(self, *args)

    def append(self, x):
        return _itreefile.vector_IResNodeInfo_append(self, x)

    def empty(self):
        return _itreefile.vector_IResNodeInfo_empty(self)

    def size(self):
        return _itreefile.vector_IResNodeInfo_size(self)

    def clear(self):
        return _itreefile.vector_IResNodeInfo_clear(self)

    def swap(self, v):
        return _itreefile.vector_IResNodeInfo_swap(self, v)

    def get_allocator(self):
        return _itreefile.vector_IResNodeInfo_get_allocator(self)

    def begin(self):
        return _itreefile.vector_IResNodeInfo_begin(self)

    def end(self):
        return _itreefile.vector_IResNodeInfo_end(self)

    def rbegin(self):
        return _itreefile.vector_IResNodeInfo_rbegin(self)

    def rend(self):
        return _itreefile.vector_IResNodeInfo_rend(self)

    def pop_back(self):
        return _itreefile.vector_IResNodeInfo_pop_back(self)

    def erase(self, *args):
        return _itreefile.vector_IResNodeInfo_erase(self, *args)

    def __init__(self, *args):
        this = _itreefile.new_vector_IResNodeInfo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _itreefile.vector_IResNodeInfo_push_back(self, x)

    def front(self):
        return _itreefile.vector_IResNodeInfo_front(self)

    def back(self):
        return _itreefile.vector_IResNodeInfo_back(self)

    def assign(self, n, x):
        return _itreefile.vector_IResNodeInfo_assign(self, n, x)

    def resize(self, *args):
        return _itreefile.vector_IResNodeInfo_resize(self, *args)

    def insert(self, *args):
        return _itreefile.vector_IResNodeInfo_insert(self, *args)

    def reserve(self, n):
        return _itreefile.vector_IResNodeInfo_reserve(self, n)

    def capacity(self):
        return _itreefile.vector_IResNodeInfo_capacity(self)
    __swig_destroy__ = _itreefile.delete_vector_IResNodeInfo
    __del__ = lambda self: None
vector_IResNodeInfo_swigregister = _itreefile.vector_IResNodeInfo_swigregister
vector_IResNodeInfo_swigregister(vector_IResNodeInfo)

class INode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _itreefile.INode_name_set
    __swig_getmethods__["name"] = _itreefile.INode_name_get
    if _newclass:
        name = _swig_property(_itreefile.INode_name_get, _itreefile.INode_name_set)
    __swig_setmethods__["text"] = _itreefile.INode_text_set
    __swig_getmethods__["text"] = _itreefile.INode_text_get
    if _newclass:
        text = _swig_property(_itreefile.INode_text_get, _itreefile.INode_text_set)
    __swig_setmethods__["child"] = _itreefile.INode_child_set
    __swig_getmethods__["child"] = _itreefile.INode_child_get
    if _newclass:
        child = _swig_property(_itreefile.INode_child_get, _itreefile.INode_child_set)

    def __init__(self, *args):
        this = _itreefile.new_INode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def add(self, arg2):
        return _itreefile.INode_add(self, arg2)

    def len(self):
        return _itreefile.INode_len(self)

    def at(self, arg2):
        return _itreefile.INode_at(self, arg2)
    __swig_destroy__ = _itreefile.delete_INode
    __del__ = lambda self: None
INode_swigregister = _itreefile.INode_swigregister
INode_swigregister(INode)
cvar = _itreefile.cvar
SP_TEX = cvar.SP_TEX
SP_NUL = cvar.SP_NUL
SP_END = cvar.SP_END
header = cvar.header
version = cvar.version

class IRes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IRes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _itreefile.IRes_name_set
    __swig_getmethods__["name"] = _itreefile.IRes_name_get
    if _newclass:
        name = _swig_property(_itreefile.IRes_name_get, _itreefile.IRes_name_set)
    __swig_setmethods__["count"] = _itreefile.IRes_count_set
    __swig_getmethods__["count"] = _itreefile.IRes_count_get
    if _newclass:
        count = _swig_property(_itreefile.IRes_count_get, _itreefile.IRes_count_set)
    __swig_setmethods__["text"] = _itreefile.IRes_text_set
    __swig_getmethods__["text"] = _itreefile.IRes_text_get
    if _newclass:
        text = _swig_property(_itreefile.IRes_text_get, _itreefile.IRes_text_set)

    def __init__(self, *args):
        this = _itreefile.new_IRes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def makeName(self):
        return _itreefile.IRes_makeName(self)

    def getName(self, arg2, arg3):
        return _itreefile.IRes_getName(self, arg2, arg3)

    def open(self, arg2):
        return _itreefile.IRes_open(self, arg2)

    def write(self, arg2):
        return _itreefile.IRes_write(self, arg2)

    def toBytes(self):
        return _itreefile.IRes_toBytes(self)
    __swig_getmethods__["fromBytes"] = lambda x: _itreefile.IRes_fromBytes
    if _newclass:
        fromBytes = staticmethod(_itreefile.IRes_fromBytes)
    __swig_destroy__ = _itreefile.delete_IRes
    __del__ = lambda self: None
IRes_swigregister = _itreefile.IRes_swigregister
IRes_swigregister(IRes)

def IRes_fromBytes(arg2):
    return _itreefile.IRes_fromBytes(arg2)
IRes_fromBytes = _itreefile.IRes_fromBytes

class IResNodeInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IResNodeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IResNodeInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _itreefile.IResNodeInfo_name_set
    __swig_getmethods__["name"] = _itreefile.IResNodeInfo_name_get
    if _newclass:
        name = _swig_property(_itreefile.IResNodeInfo_name_get, _itreefile.IResNodeInfo_name_set)
    __swig_setmethods__["isFile"] = _itreefile.IResNodeInfo_isFile_set
    __swig_getmethods__["isFile"] = _itreefile.IResNodeInfo_isFile_get
    if _newclass:
        isFile = _swig_property(_itreefile.IResNodeInfo_isFile_get, _itreefile.IResNodeInfo_isFile_set)

    def __init__(self, *args):
        this = _itreefile.new_IResNodeInfo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __lt__(self, x):
        return _itreefile.IResNodeInfo___lt__(self, x)
    __swig_destroy__ = _itreefile.delete_IResNodeInfo
    __del__ = lambda self: None
IResNodeInfo_swigregister = _itreefile.IResNodeInfo_swigregister
IResNodeInfo_swigregister(IResNodeInfo)

class IResNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IResNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IResNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _itreefile.IResNode_name_set
    __swig_getmethods__["name"] = _itreefile.IResNode_name_get
    if _newclass:
        name = _swig_property(_itreefile.IResNode_name_get, _itreefile.IResNode_name_set)

    def __init__(self):
        this = _itreefile.new_IResNode()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _itreefile.delete_IResNode
    __del__ = lambda self: None

    def isFile(self):
        return _itreefile.IResNode_isFile(self)

    def isRoot(self):
        return _itreefile.IResNode_isRoot(self)

    def isLoop(self, arg2):
        return _itreefile.IResNode_isLoop(self, arg2)

    def hasNode(self, arg2):
        return _itreefile.IResNode_hasNode(self, arg2)

    def currentPath(self):
        return _itreefile.IResNode_currentPath(self)

    def findName(self, arg2):
        return _itreefile.IResNode_findName(self, arg2)

    def insert(self, *args):
        return _itreefile.IResNode_insert(self, *args)

    def remove(self, arg2):
        return _itreefile.IResNode_remove(self, arg2)

    def pop(self, arg2):
        return _itreefile.IResNode_pop(self, arg2)

    def copy(self):
        return _itreefile.IResNode_copy(self)

    def parent(self):
        return _itreefile.IResNode_parent(self)

    def parentPointer(self):
        return _itreefile.IResNode_parentPointer(self)

    def data(self):
        return _itreefile.IResNode_data(self)

    def dataPointer(self):
        return _itreefile.IResNode_dataPointer(self)

    def getNode(self, arg2):
        return _itreefile.IResNode_getNode(self, arg2)

    def getNodePointer(self, arg2):
        return _itreefile.IResNode_getNodePointer(self, arg2)

    def at(self, arg2):
        return _itreefile.IResNode_at(self, arg2)

    def atPointer(self, arg2):
        return _itreefile.IResNode_atPointer(self, arg2)

    def children(self, isSort=True):
        return _itreefile.IResNode_children(self, isSort)

    def childrenInfo(self, isSort=True):
        return _itreefile.IResNode_childrenInfo(self, isSort)

    def files(self):
        return _itreefile.IResNode_files(self)
    __swig_getmethods__["isNameVaild"] = lambda x: _itreefile.IResNode_isNameVaild
    if _newclass:
        isNameVaild = staticmethod(_itreefile.IResNode_isNameVaild)
IResNode_swigregister = _itreefile.IResNode_swigregister
IResNode_swigregister(IResNode)

def IResNode_isNameVaild(arg2):
    return _itreefile.IResNode_isNameVaild(arg2)
IResNode_isNameVaild = _itreefile.IResNode_isNameVaild

class ITreeFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITreeFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ITreeFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _itreefile.ITreeFile_name_set
    __swig_getmethods__["name"] = _itreefile.ITreeFile_name_get
    if _newclass:
        name = _swig_property(_itreefile.ITreeFile_name_get, _itreefile.ITreeFile_name_set)

    def __init__(self, *args):
        this = _itreefile.new_ITreeFile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getText(self, arg2, arg3):
        return _itreefile.ITreeFile_getText(self, arg2, arg3)

    def makeText(self, *args):
        return _itreefile.ITreeFile_makeText(self, *args)

    def addRes(self, arg2, arg3):
        return _itreefile.ITreeFile_addRes(self, arg2, arg3)

    def open(self, arg2, arg3):
        return _itreefile.ITreeFile_open(self, arg2, arg3)

    def write(self, arg2, arg3):
        return _itreefile.ITreeFile_write(self, arg2, arg3)
    __swig_destroy__ = _itreefile.delete_ITreeFile
    __del__ = lambda self: None
ITreeFile_swigregister = _itreefile.ITreeFile_swigregister
ITreeFile_swigregister(ITreeFile)

# This file is compatible with both classic and new-style classes.


